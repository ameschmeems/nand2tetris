// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		// choose between instruction 
	Not(in=instruction[15], out=ainstr);
	Mux16(a=prevout, b=instruction, sel=ainstr, out=v);
	// check if data has to be loaded into register A
	Or(a=ainstr, b=instruction[5], out=savea);
	ARegister(in=v, load=savea, out=areg, out[0..14]=addressM);
	And(a=instruction[15], b=instruction[12], out=x);
	Mux16(a=areg, b=inM, sel=x, out=data);
	// C instruction and D register
	And(a=instruction[15], b=instruction[4], out=w);
	DRegister(in=prevout, load=w, out=dreg);
	ALU(x=dreg, y=data, out=prevout, out=outM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zrflag, ng=ngflag);
	And(a=instruction[15], b=instruction[3], out=writeM);
	Not(in=zrflag, out=nzrflag);
	Not(in=ngflag, out=nngflag);
	And(a=instruction[15], b=instruction[0], out=jgt);
	And(a=nngflag, b=nzrflag, out=y);
	And(a=jgt, b=y, out=i);
	And(a=instruction[15], b=instruction[1], out=jeq);
	And(a=jeq, b=zrflag, out=j);
	And(a=instruction[15], b=instruction[2], out=jlt);
	And(a=jlt, b=ngflag, out=k);
	Or(a=i, b=j, out=l);
	Or(a=k, b=l, out=load);
	PC(in=areg, load=load, inc=true, reset=reset, out[0..14]=pc);
}